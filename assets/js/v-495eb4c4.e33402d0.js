"use strict";(self.webpackChunkmm_notes=self.webpackChunkmm_notes||[]).push([[970],{756:(s,n,a)=>{a.r(n),a.d(n,{data:()=>l});const l={key:"v-495eb4c4",path:"/interview/coding/",title:"编程题",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"模拟实现系列",slug:"模拟实现系列",children:[{level:3,title:"new 运算符",slug:"new-运算符",children:[]}]}],filePathRelative:"interview/coding/README.md",git:{updatedTime:1650634045e3}}},2869:(s,n,a)=>{a.r(n),a.d(n,{default:()=>i});var l=a(6252);const e=(0,l.uE)('<h1 id="编程题" tabindex="-1"><a class="header-anchor" href="#编程题" aria-hidden="true">#</a> 编程题</h1><h2 id="模拟实现系列" tabindex="-1"><a class="header-anchor" href="#模拟实现系列" aria-hidden="true">#</a> 模拟实现系列</h2><h3 id="new-运算符" tabindex="-1"><a class="header-anchor" href="#new-运算符" aria-hidden="true">#</a> new 运算符</h3><div class="custom-container tip"><p class="custom-container-title">new 运算符原理</p><ol><li>创建一个全新的对象</li><li>为新创建的对象添加 <strong><code>__proto__</code></strong> 属性并指向构造函数的原型对象</li><li>将新创建的对象作为函数调用的 this</li><li>如果构造函数没有返回对象类型，则新创建的对象</li></ol></div><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">myNew</span><span style="color:#D4D4D4;">() {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 获取构造函数</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">Constructor</span><span style="color:#D4D4D4;"> = [].</span><span style="color:#9CDCFE;">shift</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 创建空对象并设置原型</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">obj</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 绑定 this 并执行构造函数</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">result</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apply</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 返回构造函数显示返回的值或新对象</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">type</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">result</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;"> &amp;&amp; (</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;object&#39;</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;function&#39;</span><span style="color:#D4D4D4;">) ? </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;"> : </span><span style="color:#9CDCFE;">obj</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',5),p={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new",target:"_blank",rel:"noopener noreferrer"},o=(0,l.Uk)("new 运算符 —— MDN"),r=(0,l._)("br",null,null,-1),t={href:"https://github.com/mqyqingfeng/Blog/issues/13",target:"_blank",rel:"noopener noreferrer"},c=(0,l.Uk)("相关学习文章"),D={},i=(0,a(3744).Z)(D,[["render",function(s,n){const a=(0,l.up)("OutboundLink");return(0,l.wg)(),(0,l.iD)(l.HY,null,[e,(0,l._)("p",null,[(0,l._)("a",p,[o,(0,l.Wm)(a)]),r,(0,l._)("a",t,[c,(0,l.Wm)(a)])])],64)}]])},3744:(s,n)=>{n.Z=(s,n)=>{const a=s.__vccOpts||s;for(const[s,l]of n)a[s]=l;return a}}}]);