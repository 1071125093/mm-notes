"use strict";(self.webpackChunkmm_notes=self.webpackChunkmm_notes||[]).push([[287],{6174:(s,n,l)=>{l.r(n),l.d(n,{data:()=>a});const a=JSON.parse('{"key":"v-078cec97","path":"/interview/base/types.html","title":"数据类型","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"基本类型","slug":"基本类型","children":[]},{"level":2,"title":"引用类型","slug":"引用类型","children":[]},{"level":2,"title":"类型判断","slug":"类型判断","children":[{"level":3,"title":"typeof","slug":"typeof","children":[]},{"level":3,"title":"instanceof","slug":"instanceof","children":[]},{"level":3,"title":"constructor","slug":"constructor","children":[]},{"level":3,"title":"Array.isArray()","slug":"array-isarray","children":[]},{"level":3,"title":"Object.prototype.toString","slug":"object-prototype-tostring","children":[]}]}],"git":{"updatedTime":1672904385000},"filePathRelative":"interview/base/types.md"}')},2572:(s,n,l)=>{l.r(n),l.d(n,{default:()=>mn});var a=l(6252);const o=(0,a._)("h1",{id:"数据类型",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#数据类型","aria-hidden":"true"},"#"),(0,a.Uk)(" 数据类型")],-1),e={class:"custom-container tip"},p=(0,a._)("p",{class:"custom-container-title"},"温馨提示",-1),r=(0,a.Uk)("阅读"),c={href:"https://www.ituring.com.cn/book/2472",target:"_blank",rel:"noopener noreferrer"},t=(0,a.Uk)("《JavaScript 高级程序设计（第 4 版）》"),i=(0,a.Uk)("和各个大佬的文章所归纳的总结，"),D=(0,a._)("strong",null,"如有异议按你的理解为主",-1),y=(0,a._)("p",null,[(0,a._)("code",null,"JavaScript"),(0,a.Uk)(" 中的数据类型分为基本数据类型和引用数据类型")],-1),d=(0,a._)("h2",{id:"基本类型",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#基本类型","aria-hidden":"true"},"#"),(0,a.Uk)(" 基本类型")],-1),u=(0,a._)("blockquote",null,[(0,a._)("p",null,"注: 基本数据类型也可以叫原始数据类型")],-1),C=(0,a._)("p",null,[(0,a.Uk)("在 "),(0,a._)("code",null,"ES2020"),(0,a.Uk)(" 标准下的 "),(0,a._)("code",null,"JavaScript"),(0,a.Uk)(" 一共有以下 7 种基本类型")],-1),v=(0,a.uE)("<li><strong><code>undefined</code></strong> 未定义</li><li><strong><code>null</code></strong> 空指针</li><li><strong><code>boolean</code></strong> 布尔值</li><li><strong><code>string</code></strong> 字符串</li><li><strong><code>number</code></strong> 数值</li>",5),b=(0,a._)("strong",null,[(0,a._)("code",null,"symbol")],-1),m=(0,a.Uk)(" 独一无二的值 ("),g={href:"https://es6.ruanyifeng.com/#docs/symbol",target:"_blank",rel:"noopener noreferrer"},E=(0,a.Uk)("ES6 引入"),_=(0,a.Uk)(")"),A=(0,a._)("strong",null,[(0,a._)("code",null,"bigint")],-1),h=(0,a.Uk)(" 大整数 ("),f={href:"https://es6.ruanyifeng.com/#docs/number#BigInt-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},k=(0,a.Uk)("ES2020 引入"),S=(0,a.Uk)(")"),B=(0,a.uE)('<div class="custom-container tip"><p class="custom-container-title">基本类型总结</p><ul><li>基本类型仅保存原始值，不存在属性和方法</li><li>基本类型存储在 <strong>栈内存</strong> 中</li><li>保存基本类型的变量是 <strong>按值 (by value) 访问</strong> 的，操作的就是存储在变量中的实际值</li><li>复制基本类型时会创建该值的第二个副本 (独立使用，互不干扰)</li></ul></div><div class="custom-container tip"><p class="custom-container-title">为什么原始值不存在属性和方法，但 &#39;hello world&#39;.toString() 可以正确执行</p><p>为了方便操作原始值 <code>ECMAScript</code> 提供了 3 种特殊的引用类型：<code>Boolean</code> <code>Number</code> <code>String</code>，每当用到某个原始值的方法或属性时，后台都会创建一个相应原始包装类型的对象，在执行完后再销毁这个包装对象</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// 举个 🌰</span></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">str</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;hello world&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toString</span><span style="color:#D4D4D4;">()</span></span>\n<span class="line"><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">/**</span></span>\n<span class="line"><span style="color:#6A9955;"> * 在执行上面的代码时 `JavaScript` 都会执行以下 3 步</span></span>\n<span class="line"><span style="color:#6A9955;"> * 1. 创建一个 String 类型的实例</span></span>\n<span class="line"><span style="color:#6A9955;"> * 2. 调用实例上的特定方法或属性</span></span>\n<span class="line"><span style="color:#6A9955;"> * 3. 销毁刚刚创建的实例</span></span>\n<span class="line"><span style="color:#6A9955;"> */</span></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">str</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;hello world&#39;</span></span>\n<span class="line"><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">toString</span><span style="color:#D4D4D4;">()</span></span>\n<span class="line"><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">length</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型" aria-hidden="true">#</a> 引用类型</h2><p>在 <code>JavaScript</code> 中除了基本类型，其他的都是引用类型，常见的引用类型如下</p>',5),j=(0,a.uE)("<li><strong><code>Object</code></strong> 对象</li><li><strong><code>Array</code></strong> 数组</li><li><strong><code>Function</code></strong> 函数</li><li><strong><code>Date</code></strong> 日期与时间</li><li><strong><code>RegExp</code></strong> 正则表达式</li>",5),F=(0,a._)("strong",null,[(0,a._)("code",null,"Set")],-1),U=(0,a.Uk)(" 类似于数组但成员的值都是唯一的 ("),W={href:"https://es6.ruanyifeng.com/#docs/set-map#Set",target:"_blank",rel:"noopener noreferrer"},w=(0,a.Uk)("ES6 引入"),O=(0,a.Uk)(")"),x=(0,a._)("strong",null,[(0,a._)("code",null,"WeakSet")],-1),J=(0,a.Uk)(" ("),P={href:"https://es6.ruanyifeng.com/#docs/set-map#WeakSet",target:"_blank",rel:"noopener noreferrer"},M=(0,a.Uk)("ES6 引入"),N=(0,a.Uk)(")"),R=(0,a._)("strong",null,[(0,a._)("code",null,"Map")],-1),z=(0,a.Uk)(" 类似于对象也是键值对的集合 ("),q={href:"https://es6.ruanyifeng.com/#docs/set-map#Map",target:"_blank",rel:"noopener noreferrer"},I=(0,a.Uk)("ES6 引入"),G=(0,a.Uk)(")"),T=(0,a._)("strong",null,[(0,a._)("code",null,"WeakMap")],-1),Z=(0,a.Uk)(" ("),L={href:"https://es6.ruanyifeng.com/#docs/set-map#WeakMap",target:"_blank",rel:"noopener noreferrer"},H=(0,a.Uk)("ES6 引入"),K=(0,a.Uk)(")"),Q=(0,a.uE)('<div class="custom-container tip"><p class="custom-container-title">引用类型总结</p><ul><li>因为 <code>JavaScript</code> 不允许直接访问内存位置(不能直接操作对象所在的内存空间)，所以引用类型在 <strong>栈内存</strong> 中存储的是地址(内存指针)，而引用类型中的数据(方法或属性)是存储在 <strong>堆内存</strong> 中</li><li>保存引用类型的变量是 <strong>按引用 (by reference) 访问</strong> ，实际上操作的是对该对象的引用而非实际的对象本身</li><li>复制引用类型时只会复制内存指针</li></ul></div>',1),V={class:"custom-container tip"},X=(0,a._)("p",{class:"custom-container-title"},"栈内存和堆内存",-1),Y=(0,a._)("li",null,[(0,a._)("strong",null,"栈内存"),(0,a._)("ul",null,[(0,a._)("li",null,"存储基本数据类型和堆内存地址"),(0,a._)("li",null,"是连续的内存空间")])],-1),$=(0,a._)("li",null,[(0,a._)("strong",null,"堆内存"),(0,a._)("ul",null,[(0,a._)("li",null,"存储引用数据类型和闭包中的变量"),(0,a._)("li",null,"不是连续的内存空间")])],-1),ss=(0,a.Uk)("了解更多请点击 "),ns={href:"https://github.com/chenqf/frontEndBlog/issues/9",target:"_blank",rel:"noopener noreferrer"},ls=(0,a.Uk)("JS 中的栈内存和堆内存"),as=(0,a.uE)('<h2 id="类型判断" tabindex="-1"><a class="header-anchor" href="#类型判断" aria-hidden="true">#</a> 类型判断</h2><p>常见的五种判断方式</p><ul><li><strong><code>typeof</code></strong></li><li><strong><code>instanceof</code></strong></li><li><strong><code>constructor</code></strong></li><li><strong><code>Array.isArray()</code></strong></li><li><strong><code>Object.prototype.toString</code></strong></li></ul><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h3><ul><li>除 <strong><code>null</code></strong> 外的基本类型都能准确判断</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// &#39;undefined&#39;</span></span>\n<span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">             </span><span style="color:#6A9955;">// &#39;object&#39;</span></span>\n<span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">             </span><span style="color:#6A9955;">// &#39;boolean&#39;</span></span>\n<span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;maomao&#39;</span><span style="color:#D4D4D4;">         </span><span style="color:#6A9955;">// &#39;string&#39;</span></span>\n<span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">2021</span><span style="color:#D4D4D4;">             </span><span style="color:#6A9955;">// &#39;number&#39;</span></span>\n<span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Symbol</span><span style="color:#D4D4D4;">()         </span><span style="color:#6A9955;">// &#39;symbol&#39;</span></span>\n<span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">BigInt</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2021</span><span style="color:#D4D4D4;">)     </span><span style="color:#6A9955;">// &#39;bigint&#39;</span></span>\n<span class="line"></span></code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',6),os={class:"custom-container tip"},es=(0,a._)("p",{class:"custom-container-title"},"为什么 typeof null === 'object'",-1),ps=(0,a.uE)("在 <code>JavaScript</code> 最初的实现中，<code>JavaScript</code> 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 <code>0</code>。由于 <code>null</code> 代表的是空指针（大多数平台下值为 <code>0x00</code>），因此<code>null</code> 的类型标签是 <code>0</code>，<code>typeof null</code> 也因此返回 <code>&quot;object&quot;</code> —— ",19),rs={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null",target:"_blank",rel:"noopener noreferrer"},cs=(0,a.Uk)("MDN"),ts=(0,a.uE)('<ul><li>除 <strong><code>function</code></strong> 外的引用类型均返回 <code>object</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> {}               </span><span style="color:#6A9955;">// &#39;object&#39;</span></span>\n<span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> []               </span><span style="color:#6A9955;">// &#39;object&#39;</span></span>\n<span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">log</span><span style="color:#D4D4D4;">      </span><span style="color:#6A9955;">// &#39;function&#39;</span></span>\n<span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Date</span><span style="color:#D4D4D4;">()       </span><span style="color:#6A9955;">// &#39;object&#39;</span></span>\n<span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">RegExp</span><span style="color:#D4D4D4;">()     </span><span style="color:#6A9955;">// &#39;object&#39;</span></span>\n<span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Set</span><span style="color:#D4D4D4;">()        </span><span style="color:#6A9955;">// &#39;object&#39;</span></span>\n<span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">WeakSet</span><span style="color:#D4D4D4;">()    </span><span style="color:#6A9955;">// &#39;object&#39;</span></span>\n<span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">()        </span><span style="color:#6A9955;">// &#39;object&#39;</span></span>\n<span class="line"><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">WeakMap</span><span style="color:#D4D4D4;">()    </span><span style="color:#6A9955;">// &#39;object&#39;</span></span>\n<span class="line"></span></code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h3>',3),is={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof",target:"_blank",rel:"noopener noreferrer"},Ds=(0,a._)("code",null,"instanceof",-1),ys=(0,a.Uk)(" 用于检测构造函数的 "),ds=(0,a._)("code",null,"prototype",-1),us=(0,a.Uk)(" 属性是否存在于实例对象的原型链上"),Cs=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">/** 基本类型 */</span></span>\n<span class="line"><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Boolean</span><span style="color:#D4D4D4;">       </span><span style="color:#6A9955;">// false</span></span>\n<span class="line"><span style="color:#CE9178;">&#39;maomao&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// false</span></span>\n<span class="line"><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Number</span><span style="color:#D4D4D4;">           </span><span style="color:#6A9955;">// false</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">/** 引用类型 */</span></span>\n<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Person</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">p1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Person</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;maomao&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">          </span><span style="color:#6A9955;">// true</span></span>\n<span class="line"><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">          </span><span style="color:#6A9955;">// true</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">// 修改原型，使 p1 不再是 Person 的实例</span></span>\n<span class="line"><span style="color:#4EC9B0;">Reflect</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setPrototypeOf</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#6A9955;">// OR p1.__proto__ = Array.prototype</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">          </span><span style="color:#6A9955;">// false</span></span>\n<span class="line"><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">           </span><span style="color:#6A9955;">// true</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),vs={class:"custom-container tip"},bs=(0,a._)("p",{class:"custom-container-title"},"instanceof 总结",-1),ms=(0,a._)("li",null,[(0,a._)("code",null,"instanceof"),(0,a.Uk)(" 不能判断基本类型，对于引用类型只能判断原型链上的从属关系")],-1),gs=(0,a._)("code",null,"instanceof",-1),Es=(0,a.Uk)(" 并不完全可靠，因为构造函数的 "),_s=(0,a._)("code",null,"prototype",-1),As=(0,a.Uk)(" 属性可能会被修改 "),hs=(0,a.Uk)("修改原型的方法 "),fs=(0,a.Uk)("使用 "),ks=(0,a._)("code",null,"ES6",-1),Ss=(0,a.Uk)(" 提供的 "),Bs={href:"https://es6.ruanyifeng.com/?search=%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B&x=0&y=0#docs/reflect#Reflect-setPrototypeOfobj-newProto",target:"_blank",rel:"noopener noreferrer"},js=(0,a._)("code",null,"Reflect.setPrototypeOf()",-1),Fs=(0,a.Uk)(" 方法"),Us=(0,a._)("li",null,[(0,a.Uk)("借助于非标准的 "),(0,a._)("code",null,"__proto__"),(0,a.Uk)(" 伪属性")],-1),Ws=(0,a._)("h3",{id:"constructor",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#constructor","aria-hidden":"true"},"#"),(0,a.Uk)(" constructor")],-1),ws=(0,a.Uk)("实例对象可以通过 "),Os={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor",target:"_blank",rel:"noopener noreferrer"},xs=(0,a._)("code",null,"constructor",-1),Js=(0,a.Uk)(" 属性去访问它的构造函数"),Ps=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">/** 基本类型 */</span></span>\n<span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> === </span><span style="color:#4EC9B0;">Boolean</span><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">// true</span></span>\n<span class="line"><span style="color:#CE9178;">&#39;maomao&#39;</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> === </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">           </span><span style="color:#6A9955;">// true</span></span>\n<span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2021</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> === </span><span style="color:#4EC9B0;">Number</span><span style="color:#D4D4D4;">             </span><span style="color:#6A9955;">// true</span></span>\n<span class="line"><span style="color:#4EC9B0;">Symbol</span><span style="color:#D4D4D4;">().</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> === </span><span style="color:#4EC9B0;">Symbol</span><span style="color:#D4D4D4;">           </span><span style="color:#6A9955;">// true</span></span>\n<span class="line"><span style="color:#4EC9B0;">BigInt</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2021</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> === </span><span style="color:#4EC9B0;">BigInt</span><span style="color:#D4D4D4;">       </span><span style="color:#6A9955;">// true</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">/** 引用类型 */</span></span>\n<span class="line"><span style="color:#D4D4D4;">({}).</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> === </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">               </span><span style="color:#6A9955;">// true</span></span>\n<span class="line"><span style="color:#D4D4D4;">([]).</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> === </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">                </span><span style="color:#6A9955;">// true</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Person</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">Person</span><span style="color:#D4D4D4;">   </span><span style="color:#6A9955;">// true</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">// 修改原型造成 constructor 丢失</span></span>\n<span class="line"><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = {}</span></span>\n<span class="line"><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> === </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">   </span><span style="color:#6A9955;">// true</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">constructor 总结</p><ul><li><code>constructor</code> 可以判断除 <code>undefined</code> 和 <code>null</code> 外的所有基本类型和引用类型(<code>undefined</code> 和 <code>null</code> 不存在构造函数)</li><li><code>constructor</code> 并不完全可靠，因为构造函数的 <code>prototype</code> 属性可能会被修改，从而造成 <code>constructor</code> 属性指向不准确</li></ul></div><h3 id="array-isarray" tabindex="-1"><a class="header-anchor" href="#array-isarray" aria-hidden="true">#</a> Array.isArray()</h3>',3),Ms={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray",target:"_blank",rel:"noopener noreferrer"},Ns=(0,a._)("code",null,"Array.isArray()",-1),Rs=(0,a.Uk)(" 用于判断一个值是否是数组 ("),zs=(0,a._)("code",null,"Array",-1),qs=(0,a.Uk)(")"),Is=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isArray</span><span style="color:#D4D4D4;">([])   </span><span style="color:#6A9955;">// true</span></span>\n<span class="line"><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isArray</span><span style="color:#D4D4D4;">({})   </span><span style="color:#6A9955;">// false</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring" aria-hidden="true">#</a> Object.prototype.toString</h3>',2),Gs=(0,a.Uk)("每个对象都有一个 "),Ts={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString",target:"_blank",rel:"noopener noreferrer"},Zs=(0,a._)("code",null,"toString()",-1),Ls=(0,a.Uk)(" 方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用，默认情况下 "),Hs=(0,a._)("code",null,"toString()",-1),Ks=(0,a.Uk)(" 方法被每个 "),Qs=(0,a._)("code",null,"Object",-1),Vs=(0,a.Uk)(" 对象继承。如果此方法在自定义对象中未被覆盖 "),Xs=(0,a._)("code",null,"toString()",-1),Ys=(0,a.Uk)(" 返回 "),$s=(0,a._)("code",null,'"[object type]"',-1),sn=(0,a.Uk)(" 其中 "),nn=(0,a._)("code",null,"type",-1),ln=(0,a.Uk)(" 是对象的类型"),an=(0,a._)("li",null,[(0,a.Uk)("为了每个对象都能通过 "),(0,a._)("code",null,"Object.prototype.toString()"),(0,a.Uk)(" 来检测，需要以 "),(0,a._)("code",null,"Function.prototype.call()"),(0,a.Uk)(" 或者 "),(0,a._)("code",null,"Function.prototype.apply()"),(0,a.Uk)(" 的形式来调用")],-1),on=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">toString</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">toString</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">)        </span><span style="color:#6A9955;">// &#39;[object Undefined]&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">)             </span><span style="color:#6A9955;">// &#39;[object Null]&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">)             </span><span style="color:#6A9955;">// &#39;[object Boolean]&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;maomao&#39;</span><span style="color:#D4D4D4;">)         </span><span style="color:#6A9955;">// &#39;[object String]&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2021</span><span style="color:#D4D4D4;">)             </span><span style="color:#6A9955;">// &#39;[object Number]&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Symbol</span><span style="color:#D4D4D4;">())         </span><span style="color:#6A9955;">// &#39;[object Symbol]&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">BigInt</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2021</span><span style="color:#D4D4D4;">))     </span><span style="color:#6A9955;">// &#39;[object BigInt]&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">({})               </span><span style="color:#6A9955;">// &#39;[object Object]&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">([])               </span><span style="color:#6A9955;">// &#39;[object Array]&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">log</span><span style="color:#D4D4D4;">)      </span><span style="color:#6A9955;">// &#39;[object Function]&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Date</span><span style="color:#D4D4D4;">())       </span><span style="color:#6A9955;">// &#39;[object Date]&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">RegExp</span><span style="color:#D4D4D4;">())     </span><span style="color:#6A9955;">// &#39;[object RegExp]&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Set</span><span style="color:#D4D4D4;">())        </span><span style="color:#6A9955;">// &#39;[object Set]&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">WeakSet</span><span style="color:#D4D4D4;">())    </span><span style="color:#6A9955;">// &#39;[object WeakSet]&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">())        </span><span style="color:#6A9955;">// &#39;[object Map]&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">toString</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">WeakMap</span><span style="color:#D4D4D4;">())    </span><span style="color:#6A9955;">// &#39;[object WeakMap]&#39;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),en=(0,a._)("code",null,"toString",-1),pn=(0,a.Uk)(" 方法的在 "),rn={href:"https://es5.github.io/#x15.2.4.2",target:"_blank",rel:"noopener noreferrer"},cn=(0,a._)("code",null,"ECMAScript 5",-1),tn=(0,a.Uk)(" 下的大致执行过程"),Dn=(0,a.uE)("<ol><li>如果 <code>this</code> 是 <code>undefined</code> 返回 <code>[object Undefined]</code></li><li>如果 <code>this</code> 是 <code>null</code> 返回 <code>[object Null]</code></li><li>让 <code>O</code> 成为 <code>ToObject(this)</code> 的结果</li><li>让 <code>class</code> 成为 <code>O</code> 的内部属性 <code>[[Class]]</code> 的值</li><li>返回由 <strong><code>&quot;[object &quot;</code></strong> <strong><code>class</code></strong> <strong><code>&quot;]&quot;</code></strong> 三个部分组成的字符串</li></ol>",1),yn={class:"custom-container warning"},dn=(0,a._)("p",{class:"custom-container-title"},"注意点",-1),un=(0,a._)("p",null,[(0,a.Uk)("不同 "),(0,a._)("code",null,"ECMAScript"),(0,a.Uk)(" 版本对 "),(0,a._)("code",null,"toString"),(0,a.Uk)(" 方法的规范都有所不同")],-1),Cn={href:"https://juejin.cn/post/6972878737582850062#heading-27",target:"_blank",rel:"noopener noreferrer"},vn=(0,a.Uk)("Object.prototype.toString 方法的原理"),bn={},mn=(0,l(3744).Z)(bn,[["render",function(s,n){const l=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)("div",null,[o,(0,a._)("div",e,[p,(0,a._)("p",null,[r,(0,a._)("a",c,[t,(0,a.Wm)(l)]),i,D])]),y,d,u,C,(0,a._)("ul",null,[v,(0,a._)("li",null,[b,m,(0,a._)("a",g,[E,(0,a.Wm)(l)]),_]),(0,a._)("li",null,[A,h,(0,a._)("a",f,[k,(0,a.Wm)(l)]),S])]),B,(0,a._)("ul",null,[j,(0,a._)("li",null,[F,U,(0,a._)("a",W,[w,(0,a.Wm)(l)]),O]),(0,a._)("li",null,[x,J,(0,a._)("a",P,[M,(0,a.Wm)(l)]),N]),(0,a._)("li",null,[R,z,(0,a._)("a",q,[I,(0,a.Wm)(l)]),G]),(0,a._)("li",null,[T,Z,(0,a._)("a",L,[H,(0,a.Wm)(l)]),K])]),Q,(0,a._)("div",V,[X,(0,a._)("ul",null,[Y,$,(0,a._)("li",null,[ss,(0,a._)("a",ns,[ls,(0,a.Wm)(l)])])])]),as,(0,a._)("div",os,[es,(0,a._)("p",null,[ps,(0,a._)("a",rs,[cs,(0,a.Wm)(l)])])]),ts,(0,a._)("p",null,[(0,a._)("a",is,[Ds,(0,a.Wm)(l)]),ys,ds,us]),Cs,(0,a._)("div",vs,[bs,(0,a._)("ul",null,[ms,(0,a._)("li",null,[gs,Es,_s,As,(0,a._)("ul",null,[(0,a._)("li",null,[hs,(0,a._)("ul",null,[(0,a._)("li",null,[fs,ks,Ss,(0,a._)("a",Bs,[js,(0,a.Wm)(l)]),Fs]),Us])])])])])]),Ws,(0,a._)("p",null,[ws,(0,a._)("a",Os,[xs,(0,a.Wm)(l)]),Js]),Ps,(0,a._)("p",null,[(0,a._)("a",Ms,[Ns,(0,a.Wm)(l)]),Rs,zs,qs]),Is,(0,a._)("ul",null,[(0,a._)("li",null,[Gs,(0,a._)("a",Ts,[Zs,(0,a.Wm)(l)]),Ls,Hs,Ks,Qs,Vs,Xs,Ys,$s,sn,nn,ln]),an]),on,(0,a._)("p",null,[en,pn,(0,a._)("a",rn,[cn,(0,a.Wm)(l)]),tn]),Dn,(0,a._)("div",yn,[dn,un,(0,a._)("p",null,[(0,a._)("a",Cn,[vn,(0,a.Wm)(l)])])])])}]])},3744:(s,n)=>{n.Z=(s,n)=>{const l=s.__vccOpts||s;for(const[s,a]of n)l[s]=a;return l}}}]);