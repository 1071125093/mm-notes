"use strict";(self.webpackChunkmm_notes=self.webpackChunkmm_notes||[]).push([[824],{4973:(s,n,a)=>{a.r(n),a.d(n,{data:()=>l});const l=JSON.parse('{"key":"v-55e228d6","path":"/interview/base/inherit.html","title":"继承","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"原型链继承","slug":"原型链继承","link":"#原型链继承","children":[]},{"level":2,"title":"借用构造函数继承（经典继承）","slug":"借用构造函数继承-经典继承","link":"#借用构造函数继承-经典继承","children":[]},{"level":2,"title":"组合继承","slug":"组合继承","link":"#组合继承","children":[]},{"level":2,"title":"原型式继承","slug":"原型式继承","link":"#原型式继承","children":[]},{"level":2,"title":"寄生式继承","slug":"寄生式继承","link":"#寄生式继承","children":[]},{"level":2,"title":"寄生组合式继承","slug":"寄生组合式继承","link":"#寄生组合式继承","children":[]},{"level":2,"title":"ES6 类继承 extends","slug":"es6-类继承-extends","link":"#es6-类继承-extends","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"相关文章","slug":"相关文章","link":"#相关文章","children":[]}],"git":{"updatedTime":1676563041000},"filePathRelative":"interview/base/inherit.md"}')},874:(s,n,a)=>{a.r(n),a.d(n,{default:()=>E});var l=a(6808);const p=a.p+"assets/img/combination-inheritance.ac332f5e.png",o=a.p+"assets/img/prototypal-inheritance.8cd579eb.png",e=a.p+"assets/img/parasitic-combination-inheritance.242d3d53.png",D=(0,l._)("h1",{id:"继承",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#继承","aria-hidden":"true"},"#"),(0,l.Uk)(" 继承")],-1),c={class:"custom-container tip"},r=(0,l._)("p",{class:"custom-container-title"},"温馨提示",-1),t={href:"https://www.ituring.com.cn/book/2472",target:"_blank",rel:"noopener noreferrer"},i=(0,l._)("strong",null,"如有异议按你的理解为主",-1),y=(0,l.uE)('<p>继承是面向对象编程中的一个最为人津津乐道的概念，其描述了类与类之间的父子关系，主要作用是提升代码复用性让代码更为简洁。</p><p>很多面向对象语言都支持两种继承：</p><ul><li>接口继承：只继承方法签名</li><li>实现继承：直接继承实际的方法</li></ul><p>接口继承在 <code>ECMAScript</code> 中是不可能的，因为函数没有签名，因此实现继承是 <code>ECMAScript</code> 唯一支持的继承方式，而且其<strong>实现继承主要是依靠原型链来实现</strong>的。</p><h2 id="原型链继承" tabindex="-1"><a class="header-anchor" href="#原型链继承" aria-hidden="true">#</a> 原型链继承</h2><p>构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型有一个属性指回构造函数，而实例有一个内部指针指向原型。如果原型是另一个类型的实例呢？那就意味着这个原型本身有一个内部指针指向另一个原型，相应地另一个原型也有一个指针指向另一个构造函数。这样就在实例和原型之间构造了一条原型链。这就是原型链的基本构想</p><div class="custom-container tip"><p class="custom-container-title">原型链继承</p><p>原型链继承是通过重写子类的原型<strong>将父类的实例作为子类的原型</strong></p><p>缺点</p><ul><li>父类上的引用类型属性会被所有实例共享，其中一个实例进行修改时会影响其他实例</li><li>创建子类实例时不能向父类构造函数传参</li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SuperType</span><span style="color:#D4D4D4;">() {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">property</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;Super&#39;</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;"> = [</span><span style="color:#CE9178;">&#39;red&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;blue&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;green&#39;</span><span style="color:#D4D4D4;">]</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#4EC9B0;">SuperType</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getSuperValue</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">property</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SubType</span><span style="color:#D4D4D4;">() {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">subproperty</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">// 关键点：创建父类 SuperType 的实例并将其赋值给子类的原型 SubType.prototype</span></span>\n<span class="line"><span style="color:#4EC9B0;">SubType</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SuperType</span><span style="color:#D4D4D4;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#4EC9B0;">SubType</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getSubValue</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">subproperty</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">instance1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SubType</span><span style="color:#D4D4D4;">()</span></span>\n<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;instance1&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getSuperValue</span><span style="color:#D4D4D4;">()) </span><span style="color:#6A9955;">// &#39;Super&#39;</span></span>\n<span class="line"><span style="color:#6A9955;">// 在其中一个子类实例上修改父类上的引用属性</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;black&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">instance2</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SubType</span><span style="color:#D4D4D4;">()</span></span>\n<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;instance2&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">instance2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getSuperValue</span><span style="color:#D4D4D4;">()) </span><span style="color:#6A9955;">// &#39;Super&#39;</span></span>\n<span class="line"><span style="color:#6A9955;">// 在另一个子类实例上输出父类上的引用属性</span></span>\n<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;instance2&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">instance2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;black&#39;]</span></span>\n<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="借用构造函数继承-经典继承" tabindex="-1"><a class="header-anchor" href="#借用构造函数继承-经典继承" aria-hidden="true">#</a> 借用构造函数继承（经典继承）</h2><div class="custom-container tip"><p class="custom-container-title">借用构造函数继承（经典继承）</p><p>借用构造函数继承是<strong>使用父类的构造函数来增强子类实例</strong>等同于复制父类的实例给子类（不使用原型）</p><p>缺点</p><ul><li>方法都在构造函数中定义，每次创建实例都会创建一遍方法（影响性能）</li><li>只能继承父类的实例属性和方法，不能继承原型属性和方法</li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SuperType</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;"> = [</span><span style="color:#CE9178;">&#39;red&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;blue&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;green&#39;</span><span style="color:#D4D4D4;">]</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">  }</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SubType</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 继承 SuperType</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">SuperType</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">instance1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SubType</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;maomao&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;black&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;instance1&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// &#39;maomao&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;instance1&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;black&#39;]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">instance2</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SubType</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;maomao1996&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;instance2&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">instance2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// &#39;maomao1996&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;instance2&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">instance2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">log</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">instance2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">log</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// false</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组合继承" tabindex="-1"><a class="header-anchor" href="#组合继承" aria-hidden="true">#</a> 组合继承</h2><div class="custom-container tip"><p class="custom-container-title">组合继承</p><p>组合继承（有时候也叫伪经典继承）是上面两种继承的组合，将两者的优点集中了起来。基本的思路是<strong>使用原型链继承原型上的属性和方法，通过借用构造函数来实现对实例属性的继承</strong>。这样既可以把方法定义在原型上实现函数复用，又可以让每个实例都有其自己的属性</p><ul><li>优点：弥补了原型链和借用构造函数的不足，<strong>是 <code>JavaScript</code> 中使用最多的继承模式</strong>。而且组合继承也保留了 <code>instanceof</code> 操作符和 <code>isPrototypeOf()</code> 方法识别合成对象的能力</li><li>缺点：由于调用了两次父类的构造函数，导致父类中的实例属性和方法既存在于子类的实例中又存在于子类的原型中</li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SuperType</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 定义属性</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;"> = [</span><span style="color:#CE9178;">&#39;red&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;blue&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;green&#39;</span><span style="color:#D4D4D4;">]</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"><span style="color:#6A9955;">// 定义方法</span></span>\n<span class="line"><span style="color:#4EC9B0;">SuperType</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sayName</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SubType</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 继承属性（第二次调用：创建子类实例时调用）</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">SuperType</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">// 继承方法（第一次调用：给子类原型赋值时调用）</span></span>\n<span class="line"><span style="color:#4EC9B0;">SubType</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SuperType</span><span style="color:#D4D4D4;">()</span></span>\n<span class="line"><span style="color:#4EC9B0;">SubType</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">SubType</span></span>\n<span class="line"><span style="color:#4EC9B0;">SubType</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sayAge</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">instance1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SubType</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;maomao&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">18</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;black&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;instance1&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;black&#39;]</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sayName</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// &#39;maomao&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sayAge</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// 18</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">instance2</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SubType</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;maomao1996&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">27</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;instance2&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">instance2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;]</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sayName</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// &#39;maomao1996&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sayAge</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// 27</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组合继承缺点图解</p><p><img src="'+p+'" alt="组合继承缺点"></p><h2 id="原型式继承" tabindex="-1"><a class="header-anchor" href="#原型式继承" aria-hidden="true">#</a> 原型式继承</h2><div class="custom-container tip"><p class="custom-container-title">原型式继承</p><p>原型式继承是<strong>利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型</strong></p><p>缺点（和原型链继承一样）</p><ul><li>引用类型属性会被所有实例共享，其中一个实例进行修改时会影响其他实例</li><li>无法传递参数</li><li>每次创建对象都会创建一遍方法</li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// 借用临时构造函数，将传入的对象作为其原型对象并返回其实例</span></span>\n<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">object</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">F</span><span style="color:#D4D4D4;">() {}</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#4EC9B0;">F</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">obj</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">F</span><span style="color:#D4D4D4;">()</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>object()</code> 方法就是 <code>ES5</code> <code>Object.create</code> 的模拟实现：<strong>将传入的对象作为创建的对象的原型</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">person</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">name:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;person&#39;</span><span style="color:#D4D4D4;">,</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">colors:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&#39;red&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;blue&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;green&#39;</span><span style="color:#D4D4D4;">]</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">instance1</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">object</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;maomao&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;black&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">instance2</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;maomao1996&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;white&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;black&#39;, &#39;white&#39;]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意点</p><p>修改 <code>instance1.name</code> 时，<code>instance2.name</code> 的值并未发生改变，并不是因为 <code>instance1</code> 和 <code>instance2</code> 有独立的 <code>name</code> 值，而是因为 <code>instance1.name = &#39;maomao&#39;</code> 是给 <code>instance1</code> 添加了 <code>name</code> 值，并非修改了原型上的 <code>name</code> 值</p><p><img src="'+o+'" alt="原型式继承注意点"></p></div><h2 id="寄生式继承" tabindex="-1"><a class="header-anchor" href="#寄生式继承" aria-hidden="true">#</a> 寄生式继承</h2><div class="custom-container tip"><p class="custom-container-title">寄生式继承</p><p>寄生式继承和原型式继承比较接近，其主要实现<strong>是创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象</strong></p><p>缺点</p><ul><li>引用类型属性会被所有实例共享，其中一个实例进行修改时会影响其他实例</li><li>无法传递参数</li><li>每次创建对象都会创建一遍方法</li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">createAnother</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">original</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 通过 Object.create 创建一个新对象</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">clone</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">original</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 以某种方式增强这个对象（新增属性和方法）</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">clone</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sayHi</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;hi&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 返回这个对象</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">clone</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">person</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">name:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;person&#39;</span><span style="color:#D4D4D4;">,</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">colors:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&#39;red&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;blue&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;green&#39;</span><span style="color:#D4D4D4;">]</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">instance1</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createAnother</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;black&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sayHi</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// &#39;hi&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">instance2</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createAnother</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sayHi</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// &#39;hi&#39;</span></span>\n<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;instance2&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">instance2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;black&#39;]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">sayHi</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">instance2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">sayHi</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// false</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="寄生组合式继承" tabindex="-1"><a class="header-anchor" href="#寄生组合式继承" aria-hidden="true">#</a> 寄生组合式继承</h2><div class="custom-container tip"><p class="custom-container-title">寄生组合式继承</p><p>寄生组合式继承对组合继承进行了改良，优化调用两次父类构造函数的问题，就得到了一个 <code>ES6</code> 之前最佳的继承方式：<strong>通过借用构造函数继承属性，再使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型</strong></p><p>优点：只调用一次父类构造函数，并且因此避免了在父类原型上面创建不必要的、多余的属性。与此同时原型链还能保持不变；因此还能够正常使用 <code>instanceof</code> 和 <code>isPrototypeOf</code></p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">inheritPrototype</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">subType</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">superType</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 创建对象：创建父类原型的一个副本</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">superType</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 增强对象：解决因重写原型导致默认 constructor 丢失的问题</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">subType</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 指定对象：将新创建的对象赋值给子类的原型</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#4EC9B0;">subType</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">prototype</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">// 父类初始化实例属性和原型属性</span></span>\n<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SuperType</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;"> = [</span><span style="color:#CE9178;">&#39;red&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;blue&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;green&#39;</span><span style="color:#D4D4D4;">]</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"><span style="color:#4EC9B0;">SuperType</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sayName</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">alert</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">// 借用构造函数传递增强子类实例属性（支持传参和避免篡改）</span></span>\n<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SubType</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">SuperType</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">// 将父类原型指向子类</span></span>\n<span class="line"><span style="color:#DCDCAA;">inheritPrototype</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">SubType</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">SuperType</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">// 新增子类原型属性</span></span>\n<span class="line"><span style="color:#4EC9B0;">SubType</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sayAge</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">alert</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">instance1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SubType</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;maomao&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">18</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;a&#39;]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">instance2</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SubType</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;maomao1996&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">27</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#9CDCFE;">instance2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;A&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;A&#39;]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="'+e+'" alt="寄生组合式继承"></p><h2 id="es6-类继承-extends" tabindex="-1"><a class="header-anchor" href="#es6-类继承-extends" aria-hidden="true">#</a> ES6 类继承 extends</h2><blockquote><p><code>ES6</code> 的 <code>class</code> 只是<strong>一个语法糖本质上依然是函数</strong>，它的绝大部分功能，<code>ES5</code> 都可以做到，新的 <code>class</code> 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已</p></blockquote><p><code>class</code> 可以通过 <code>extends</code> 关键字实现继承，让子类继承父类的属性和方法。<code>extends</code> 的写法比 <code>ES5</code> 的原型链继承，要清晰和方便很多</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Point</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">x</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">y</span></span>\n<span class="line"><span style="color:#D4D4D4;">  }</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">toString</span><span style="color:#D4D4D4;">() {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">y</span></span>\n<span class="line"><span style="color:#D4D4D4;">  }</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ColorPoint</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Point</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">super</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 调用父类的 constructor(x, y)</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">color</span></span>\n<span class="line"><span style="color:#D4D4D4;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">toString</span><span style="color:#D4D4D4;">() {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&#39; &#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#569CD6;">super</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toString</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// 调用父类的 toString()</span></span>\n<span class="line"><span style="color:#D4D4D4;">  }</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">colorPoint</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ColorPoint</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;1&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;2&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;red&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">colorPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toString</span><span style="color:#D4D4D4;">()) </span><span style="color:#6A9955;">// red 12</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">ES5 和 ES6 的继承机制</p><ul><li><code>ES5</code> 的继承机制 <ul><li>先创造一个独立的子类的实例对象，然后再将父类的方法添加到这个对象上面，即<strong>实例在前，继承在后</strong></li></ul></li><li><code>ES6</code> 的继承机制 <ul><li>先将父类的属性和方法，加到一个空的对象上面，然后再将该对象作为子类的实例，即<strong>继承在前，实例在后</strong></li></ul></li></ul></div>',34),C={href:"https://babeljs.io/repl/#?browsers=&build=&builtIns=false&corejs=false&spec=false&loose=true&code_lz=MYGwhgzhAEAKD2BLAdgF2gbwFDWseyEqATgK7CrzEAUAHgDTQCeAlJjrtKgBaIQB0taAF5otDrh59-TEcw4BfLEqyhIMAMLwQVBCnQBTWqgPIAJjD1p2ufIRLlKNBs0b4dxNtk7QIpAA4GzoysEly8Au5UclHEispAA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=env&prettier=false&targets=&version=7.15.3&externalPlugins=&assumptions=%7B%7D",target:"_blank",rel:"noopener noreferrer"},d=(0,l.uE)('<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// 实现继承（类似于 ES5 的寄生组合式继承）</span></span>\n<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">_inheritsLoose</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">subClass</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">superClass</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#4EC9B0;">subClass</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">superClass</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#4EC9B0;">subClass</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">subClass</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">_setPrototypeOf</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">subClass</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">superClass</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">// 模拟 ES6 的 Reflect.setPrototypeOf 方法</span></span>\n<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">_setPrototypeOf</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">o</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">_setPrototypeOf</span><span style="color:#D4D4D4;"> =</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">setPrototypeOf</span><span style="color:#D4D4D4;"> ||</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">_setPrototypeOf</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">o</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">o</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">p</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">o</span></span>\n<span class="line"><span style="color:#D4D4D4;">    }</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">_setPrototypeOf</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">o</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">// 父类构造函数</span></span>\n<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Point</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Point</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">x</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">y</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">// 子类构造函数</span></span>\n<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">ColorPoint</span><span style="color:#D4D4D4;"> = </span><span style="color:#6A9955;">/*#__PURE__*/</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">_Point</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">_inheritsLoose</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">ColorPoint</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">_Point</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ColorPoint</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_this</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">_this</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">_Point</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">) || </span><span style="color:#569CD6;">this</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">_this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">color</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_this</span></span>\n<span class="line"><span style="color:#D4D4D4;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">ColorPoint</span></span>\n<span class="line"><span style="color:#D4D4D4;">})(</span><span style="color:#9CDCFE;">Point</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>原型链继承：通过重写子类的原型<strong>将父类的实例作为子类的原型</strong></li><li>借用构造函数继承：<strong>使用父类的构造函数来增强子类实例</strong>等同于复制父类的实例给子类（不使用原型）</li><li>组合继承：<strong>使用原型链继承原型上的属性和方法，通过借用构造函数来实现对实例属性的继承</strong></li><li>原型式继承：<strong>利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型</strong></li><li>寄生式继承：<strong>创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象</strong></li><li>寄生组合式继承：<strong>通过借用构造函数继承属性，再使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型</strong></li></ul><h2 id="相关文章" tabindex="-1"><a class="header-anchor" href="#相关文章" aria-hidden="true">#</a> 相关文章</h2>',4),v={href:"https://github.com/yygmind/blog/issues/7",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/mqyqingfeng/Blog/issues/16",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/mqyqingfeng/Blog/issues/106",target:"_blank",rel:"noopener noreferrer"},m={},E=(0,a(8580).Z)(m,[["render",function(s,n){const a=(0,l.up)("ExternalLinkIcon");return(0,l.wg)(),(0,l.iD)("div",null,[D,(0,l._)("div",c,[r,(0,l._)("p",null,[(0,l.Uk)("阅读"),(0,l._)("a",t,[(0,l.Uk)("《JavaScript 高级程序设计（第 4 版）》"),(0,l.Wm)(a)]),(0,l.Uk)("和各个大佬的文章所归纳的总结，"),i])]),y,(0,l._)("p",null,[(0,l._)("a",C,[(0,l.Uk)("通过 babel 编译来了解其背后的实现原理"),(0,l.Wm)(a)])]),d,(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("a",v,[(0,l.Uk)("JavaScript 常用八种继承方案"),(0,l.Wm)(a)])]),(0,l._)("li",null,[(0,l._)("a",u,[(0,l.Uk)("JavaScript 深入之继承的多种方式和优缺点"),(0,l.Wm)(a)])]),(0,l._)("li",null,[(0,l._)("a",b,[(0,l.Uk)("ES6 系列之 Babel 是如何编译 Class 的(下)"),(0,l.Wm)(a)])])])])}]])}}]);